/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mychatappp.gui;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.Socket;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import mychatappp.networking.MessageListener;
import mychatappp.networking.MessageTransmitter;
import mychatappp.networking.WritableGUI;

/**
 *
 * @author manthanhd
 */
public class MainScreen extends javax.swing.JFrame implements WritableGUI {

    /**
     * Creates new form MainScreen
     */
    public int triggerForSendingFile = 0, disconnected = 1, ForTheFirstTime = 1, color = 0;
    public static int comingFromListeningClasstoChangeColor = 0;
    MessageListener listener;
    String chatHistory = "";

    public MainScreen() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(10, 48, 100)); //The gui started here
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ipTextField = new javax.swing.JTextField();
        targetPort = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        message = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        listenButton = new javax.swing.JButton();
        receivePort = new javax.swing.JTextField();
        user = new javax.swing.JTextField();
        key = new javax.swing.JTextField();
        history = new javax.swing.JButton();
        FileSending = new javax.swing.JButton();
        Disconnect = new javax.swing.JButton();
        bcolor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ipTextField.setText("localhost");
        ipTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipTextFieldActionPerformed(evt);
            }
        });

        targetPort.setText("T port");
        targetPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetPortActionPerformed(evt);
            }
        });

        chat.setColumns(20);
        chat.setRows(5);
        jScrollPane1.setViewportView(chat);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        listenButton.setText("Connect");
        listenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenButtonActionPerformed(evt);
            }
        });

        receivePort.setText("R Port");

        user.setText("Name");
        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });

        key.setText("En Key");

        history.setText("Chat History");
        history.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyActionPerformed(evt);
            }
        });

        FileSending.setText("File Send");
        FileSending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileSendingActionPerformed(evt);
            }
        });

        Disconnect.setText("Disconnect");
        Disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectActionPerformed(evt);
            }
        });

        bcolor.setText("BackGround");
        bcolor.setToolTipText("");
        bcolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcolorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(history, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FileSending, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(key)
                    .addComponent(bcolor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(message)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Disconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(receivePort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPort, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listenButton)
                    .addComponent(receivePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Disconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bcolor)
                        .addGap(24, 24, 24)
                        .addComponent(history)
                        .addGap(30, 30, 30)
                        .addComponent(FileSending)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenButtonActionPerformed
        //pressing the connect button it will create a connection with other side.
        
        if(targetPort.getText().equals("T port") || receivePort.getText().equals("R Port") || key.getText().equals("En Key")){
            
            WritableGUI gui = this;
            gui.write("You did not correctly inserted En Key or R port or T port. You are requested to verify these please");
            
        }
        
        else if(!targetPort.getText().equals("T Port") && !receivePort.getText().equals("R Port") && !key.getText().equals("En Key")){
            
        disconnected = 0;
        this.write("Connected.");
        listener = new MessageListener(this, Integer.parseInt(receivePort.getText()), Integer.parseInt(key.getText()));
        listener.start(); // Connection thread will start.
        getContentPane().setBackground(new java.awt.Color(10, 48, 100));
        }
    }//GEN-LAST:event_listenButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed

        if (disconnected == 0) {

            MessageTransmitter transmitter
                    = new MessageTransmitter(this, message.getText(), ipTextField.getText(), Integer.parseInt(targetPort.getText()), Integer.parseInt(receivePort.getText()), user.getText(), Integer.parseInt(key.getText()), triggerForSendingFile);
            triggerForSendingFile = 0;
            transmitter.start();

            // This section will start the class for message transmitting.
        } else {
            this.write("You are not connected");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void ipTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipTextFieldActionPerformed

    }//GEN-LAST:event_ipTextFieldActionPerformed

    private void targetPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_targetPortActionPerformed

    private void historyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyActionPerformed

        WritableGUI gui = this;
        try {

            File file = new File(".\\ChatHistory.txt");

            //Creating Chat history file
            if (!file.exists()) {
                {
                    file.createNewFile();
                    BufferedWriter out = null;
                    FileWriter fstream = new FileWriter(".\\ChatHistory.txt", true);
                    out = new BufferedWriter(fstream);
                    out.write(chatHistory + System.lineSeparator());
                    out.close();
                }
                //end creation
            } else {
                // Writing the chat history on the file
                try {
                    BufferedWriter out = null;
                    FileWriter fstream = new FileWriter(".\\ChatHistory.txt", true); //true tells to append data.
                    out = new BufferedWriter(fstream);
                    out.write(chatHistory + System.lineSeparator());
                    out.close();
                } catch (IOException e) {

                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Writing ends

        gui.write("Chat history downloaded in your project folder named as :: ChatHistory.txt");

    }//GEN-LAST:event_historyActionPerformed

    private void FileSendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileSendingActionPerformed
        WritableGUI gui = this;
        this.write("Please write down the file path on sendbox area:");
        triggerForSendingFile = 1;// Trigger activated for sending file. If specified path is correct it will send file 
    }//GEN-LAST:event_FileSendingActionPerformed

    private void DisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectActionPerformed
        
        listener.stop(); // When disconnected button is pressed it will stop the thread so all connection will be cut off.
        try {
            listener.server.close();
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        disconnected = 1;
        this.write("Disconnected");

        getContentPane().setBackground(new java.awt.Color(10, 100, 100));
    }//GEN-LAST:event_DisconnectActionPerformed

    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userActionPerformed

    private void bcolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcolorActionPerformed
        
        //In here background colors are changed whern pressing the Button Background
        if (color == 0) {

            getContentPane().setBackground(new java.awt.Color(000, 255, 000));
            chat.setBackground(new java.awt.Color(255, 255, 255));
            chat.repaint();

        }

        if (color == 1) {
            WritableGUI gui = this;
            getContentPane().setBackground(new java.awt.Color(001, 000, 000));
            chat.setBackground(new java.awt.Color(0, 100, 0));
            chat.repaint();
            gui.write("Night mode on");
        }
        if (color == 2) {
            getContentPane().setBackground(new java.awt.Color(255, 000, 000));
            chat.setBackground(new java.awt.Color(0, 255, 0));
            chat.repaint();
        }

        if (color == 3) {

            getContentPane().setBackground(new java.awt.Color(10, 48, 100));
            chat.setBackground(new java.awt.Color(255, 255, 255));
            chat.repaint();
        }

        
        color++;
        if (color == 4) {
            color = 0;
        }

    }//GEN-LAST:event_bcolorActionPerformed

    public static void main(String args[]) {

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Disconnect;
    private javax.swing.JButton FileSending;
    private javax.swing.JButton bcolor;
    private javax.swing.JTextArea chat;
    private javax.swing.JButton history;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField key;
    private javax.swing.JButton listenButton;
    private javax.swing.JTextField message;
    private javax.swing.JTextField receivePort;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField targetPort;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables

    @Override
    public void write(String s) {

        //Time getting
        int minute, hour, second;
        String zone = "am";
        String time = "";

        Calendar calendar = Calendar.getInstance();
        minute = calendar.get(Calendar.MINUTE);
        hour = calendar.get(Calendar.HOUR_OF_DAY);
        if (hour >= 12) {
            zone = "pm";
        }
        if (hour > 12) {
            hour = hour % 12;
        }
        second = calendar.get(Calendar.SECOND);

        time = hour + ":" + minute + ":" + second + " " + zone;

//Time getting ends
        // Writing on the main screen
        chat.append(s + "  " + "(" + time + ")" + System.lineSeparator());
        scrollDown();
        if (s.equals("You are not connected") 
                || s.equals("Unable to open file")
                || s.equals("Chat history downloaded in your project folder named as :: ChatHistory.txt")
                || s.equals("Please write down the file path on sendbox area:")
                || s.equals("Unable to open file") 
                || s.equals("The other side is not connected") 
                || s.equals("Night mode on")
                ||s.equals("You did not correctly inserted En Key or R port or T port. You are requested to verify these please")){
                
                
        } else {
            chatHistory += s + "  " + "(" + time + ")" + System.lineSeparator(); //Saving the chat history in a string so when pressed 
            // button it will store all these in a file
        }

    }

    //auto scrolling

    public void scrollDown() {
        chat.setCaretPosition(chat.getText().length());
    }
    //auto scrolling ends
}
